/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.apartment_system;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.table.TableModel;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.util.Properties;
import javax.mail.MessagingException;
/**
 *
 * @author zhixu
 */
public class ManagerMainPage extends javax.swing.JFrame implements Runnable {
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    DefaultTableModel  defaultTableModel = new DefaultTableModel();
    String date = getCurrentDate();
    int hour,minutes,second;
    /**
     * Creates new form ManagerMainPage
     */
    public ManagerMainPage() {
       initComponents();
       
       DateLabel.setText(date);
       Thread t = new Thread(this);
       t.start();
       
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel85 = new javax.swing.JLabel();
        home_btn = new javax.swing.JButton();
        account_btn = new javax.swing.JButton();
        openBillpanel = new javax.swing.JButton();
        managementForumPanelbtn = new javax.swing.JButton();
        vistorPanelbtn = new javax.swing.JButton();
        residentForumPanelbtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        DateLabel = new javax.swing.JLabel();
        TimeLabel = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel31 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel30 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel32 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel33 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel34 = new javax.swing.JLabel();
        logOutbtn = new javax.swing.JButton();
        residentaccPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resident_table = new javax.swing.JTable();
        addAcc_btn = new javax.swing.JButton();
        deleteAccountbtn = new javax.swing.JButton();
        viewResidentDetails = new javax.swing.JButton();
        addaccPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        username_input = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        email_input = new javax.swing.JTextField();
        password_input = new javax.swing.JTextField();
        addResidentAccount = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        residentUnitInput = new javax.swing.JComboBox<>();
        residentAccountInfo = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        resident_name = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        resident_contact = new javax.swing.JLabel();
        resident_ic = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resident_vehicle = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        resident_unit = new javax.swing.JLabel();
        BillPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        billRecord_table = new javax.swing.JTable();
        generateReport = new javax.swing.JButton();
        SearchUnitbtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        monthPicker = new javax.swing.JComboBox<>();
        yearPicker = new javax.swing.JComboBox<>();
        unitList = new javax.swing.JComboBox<>();
        sendReminderbtn = new javax.swing.JButton();
        generateBillPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        billTypeSelection = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        allUnit = new javax.swing.JRadioButton();
        selectedUnit = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        unitInput = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        billDescription = new javax.swing.JTextField();
        sendBill = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        billAmountTextField = new javax.swing.JTextField();
        VisitorPanel = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        visitor_table = new javax.swing.JTable();
        searchVisitorInput = new javax.swing.JTextField();
        SearchByListVisitor = new javax.swing.JComboBox<>();
        searchVisitorbtn = new javax.swing.JButton();
        generateVisitorReport = new javax.swing.JButton();
        visitorReportMonthSelection = new javax.swing.JComboBox<>();
        visitorReportYearSelection = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        managementForum = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        managementForumTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        managementForumDicussionPanel = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        postContentLabel = new javax.swing.JTextArea();
        postAuthorLabel = new javax.swing.JTextField();
        postTitleLabel = new javax.swing.JTextField();
        postDateLabel = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        repliesTable = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        typeForum = new javax.swing.JLabel();
        forumID = new javax.swing.JLabel();
        backToForumTable = new javax.swing.JButton();
        residentForum = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        residentForumTable = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        createBill = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1350, 1040));

        jPanel2.setBackground(new java.awt.Color(232, 239, 239));

        jPanel6.setBackground(new java.awt.Color(98, 178, 178));

        jLabel85.setBackground(new java.awt.Color(255, 255, 255));
        jLabel85.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel85.setText("SPARROW");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel85)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        home_btn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        home_btn.setText("Home");
        home_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home_btnActionPerformed(evt);
            }
        });

        account_btn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        account_btn.setText("Resident Account");
        account_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_btnActionPerformed(evt);
            }
        });

        openBillpanel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        openBillpanel.setText("Resident Bills");
        openBillpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBillpanelActionPerformed(evt);
            }
        });

        managementForumPanelbtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        managementForumPanelbtn.setText("Management Forum");
        managementForumPanelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managementForumPanelbtnActionPerformed(evt);
            }
        });

        vistorPanelbtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        vistorPanelbtn.setText("Visitor");
        vistorPanelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vistorPanelbtnActionPerformed(evt);
            }
        });

        residentForumPanelbtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        residentForumPanelbtn.setText("Resident Forum");
        residentForumPanelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residentForumPanelbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(home_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(managementForumPanelbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(vistorPanelbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openBillpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(account_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(residentForumPanelbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(home_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(account_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openBillpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(managementForumPanelbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(residentForumPanelbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vistorPanelbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(232, 239, 239));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBackground(new java.awt.Color(99, 178, 178));
        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel11.setForeground(new java.awt.Color(0, 102, 102));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date:");
        jPanel11.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Time:");
        jPanel11.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, -1, -1));

        DateLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        DateLabel.setForeground(new java.awt.Color(255, 255, 255));
        jPanel11.add(DateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 80, 20));

        TimeLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        TimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        jPanel11.add(TimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 70, 20));

        jPanel3.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1160, 80));

        homePanel.setBackground(new java.awt.Color(255, 255, 255));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("You can view the resident account details and add or delete \nthe account.\n");
        jScrollPane7.setViewportView(jTextArea1);

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel31.setText("Resident Account");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel30.setText("Welcome Admin!");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("You can view the management forum and resident forum \nwith replies.\n");
        jScrollPane8.setViewportView(jTextArea2);

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel32.setText("Forum");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel32)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setText("You can create the bills for resident.\n");
        jScrollPane9.setViewportView(jTextArea3);

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel33.setText("Resident Bills");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel33)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setText("You can view and edit your resident\ninformation that is shared to the\napartment manager.");
        jScrollPane10.setViewportView(jTextArea4);

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel34.setText("Notification");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel34)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        logOutbtn.setText("Log Out");
        logOutbtn.setPreferredSize(new java.awt.Dimension(268, 61));
        logOutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(85, 85, 85)
                                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(67, 67, 67))))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jLabel30)
                        .addGap(262, 262, 262)
                        .addComponent(logOutbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel30)
                    .addComponent(logOutbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab1", homePanel);

        residentaccPanel.setBackground(new java.awt.Color(232, 239, 239));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("Resident Account");

        resident_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Unit", "Email", "Password", "Created Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resident_table.getTableHeader().setReorderingAllowed(false);
        resident_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resident_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resident_table);

        addAcc_btn.setText("Add Account");
        addAcc_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAcc_btnActionPerformed(evt);
            }
        });

        deleteAccountbtn.setText("Delete Account");
        deleteAccountbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountbtnActionPerformed(evt);
            }
        });

        viewResidentDetails.setText("View Resident Details");
        viewResidentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResidentDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout residentaccPanelLayout = new javax.swing.GroupLayout(residentaccPanel);
        residentaccPanel.setLayout(residentaccPanelLayout);
        residentaccPanelLayout.setHorizontalGroup(
            residentaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, residentaccPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1111, Short.MAX_VALUE)
                .addGap(85, 85, 85))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, residentaccPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addAcc_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteAccountbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewResidentDetails)
                .addGap(106, 106, 106))
            .addGroup(residentaccPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        residentaccPanelLayout.setVerticalGroup(
            residentaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(residentaccPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(63, 63, 63)
                .addGroup(residentaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAcc_btn)
                    .addComponent(deleteAccountbtn)
                    .addComponent(viewResidentDetails))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab2", residentaccPanel);

        addaccPanel.setBackground(new java.awt.Color(232, 239, 239));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setText("Add New Resident Acccount");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setText("Username");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setText("Password");

        username_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                username_inputActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setText("Email");

        password_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                password_inputActionPerformed(evt);
            }
        });

        addResidentAccount.setText("Add Account");
        addResidentAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addResidentAccountActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Resident Unit");

        residentUnitInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residentUnitInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addaccPanelLayout = new javax.swing.GroupLayout(addaccPanel);
        addaccPanel.setLayout(addaccPanelLayout);
        addaccPanelLayout.setHorizontalGroup(
            addaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addaccPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(addaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addResidentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email_input, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(residentUnitInput, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(838, Short.MAX_VALUE))
        );
        addaccPanelLayout.setVerticalGroup(
            addaccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addaccPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addGap(36, 36, 36)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(residentUnitInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(email_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(addResidentAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(522, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab3", addaccPanel);

        residentAccountInfo.setBackground(new java.awt.Color(232, 239, 239));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setText("Basic Information");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("IC No :");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("Contact Number:");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setText("Resident Name:");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel16.setText("Registered Unit:");

        resident_vehicle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Model", "Brand ", "License Plate Number", "Color"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(resident_vehicle);
        if (resident_vehicle.getColumnModel().getColumnCount() > 0) {
            resident_vehicle.getColumnModel().getColumn(0).setResizable(false);
            resident_vehicle.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel17.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel17.setText("Vehicle Information");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resident_ic, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resident_contact, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(resident_unit, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(52, 52, 52)
                        .addComponent(resident_name, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(451, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(resident_name, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(resident_ic, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel9))
                    .addComponent(resident_contact, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(resident_unit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81)
                .addComponent(jLabel17)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout residentAccountInfoLayout = new javax.swing.GroupLayout(residentAccountInfo);
        residentAccountInfo.setLayout(residentAccountInfoLayout);
        residentAccountInfoLayout.setHorizontalGroup(
            residentAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, residentAccountInfoLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        residentAccountInfoLayout.setVerticalGroup(
            residentAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(residentAccountInfoLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(167, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab4", residentAccountInfo);

        BillPanel.setBackground(new java.awt.Color(232, 239, 239));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel14.setText("Bills Management");

        billRecord_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Unit", "Bill Type", "Payment Status", "Payment Date", "Payment Method", "Description", "Created_date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(billRecord_table);

        generateReport.setText("Generate Report");
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        SearchUnitbtn.setText("Search Unit");
        SearchUnitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchUnitbtnActionPerformed(evt);
            }
        });

        jLabel23.setText("Month:");

        jLabel24.setText("Year");

        monthPicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthPickerActionPerformed(evt);
            }
        });

        yearPicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));

        sendReminderbtn.setText("Send Reminder");
        sendReminderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendReminderbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BillPanelLayout = new javax.swing.GroupLayout(BillPanel);
        BillPanel.setLayout(BillPanelLayout);
        BillPanelLayout.setHorizontalGroup(
            BillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BillPanelLayout.createSequentialGroup()
                .addGroup(BillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BillPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BillPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(BillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BillPanelLayout.createSequentialGroup()
                                .addComponent(unitList, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(SearchUnitbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(180, 180, 180)
                        .addComponent(jLabel23)
                        .addGap(32, 32, 32)
                        .addComponent(monthPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(yearPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(generateReport)
                        .addGap(18, 18, 18)
                        .addComponent(sendReminderbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        BillPanelLayout.setVerticalGroup(
            BillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BillPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel14)
                .addGap(46, 46, 46)
                .addGroup(BillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateReport)
                    .addComponent(SearchUnitbtn)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(monthPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendReminderbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(397, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab5", BillPanel);

        generateBillPanel.setBackground(new java.awt.Color(232, 239, 239));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel15.setText("Gererate Bill");

        billTypeSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Maintance fee", "Sinking fee", " " }));
        billTypeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billTypeSelectionActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel18.setText("Bill Type:");

        buttonGroup1.add(allUnit);
        allUnit.setText("All Unit");
        allUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allUnitActionPerformed(evt);
            }
        });

        buttonGroup1.add(selectedUnit);
        selectedUnit.setText("Selected Unit");
        selectedUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedUnitActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel19.setText("To:");

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel20.setText("Select Unit:");

        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel21.setText("Description");

        billDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billDescriptionActionPerformed(evt);
            }
        });

        sendBill.setText("Genarate");
        sendBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBillActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel22.setText("Amount:");

        javax.swing.GroupLayout generateBillPanelLayout = new javax.swing.GroupLayout(generateBillPanel);
        generateBillPanel.setLayout(generateBillPanelLayout);
        generateBillPanelLayout.setHorizontalGroup(
            generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateBillPanelLayout.createSequentialGroup()
                .addGap(450, 450, 450)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(generateBillPanelLayout.createSequentialGroup()
                        .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(45, 45, 45)
                        .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(billDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(unitInput, 0, 101, Short.MAX_VALUE)
                                .addComponent(billAmountTextField))))
                    .addGroup(generateBillPanelLayout.createSequentialGroup()
                        .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generateBillPanelLayout.createSequentialGroup()
                                .addComponent(allUnit)
                                .addGap(54, 54, 54)
                                .addComponent(selectedUnit))
                            .addComponent(billTypeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(401, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generateBillPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendBill, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(522, 522, 522))
        );
        generateBillPanelLayout.setVerticalGroup(
            generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateBillPanelLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jLabel15)
                .addGap(54, 54, 54)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billTypeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(35, 35, 35)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedUnit)
                    .addComponent(jLabel19)
                    .addComponent(allUnit))
                .addGap(18, 18, 18)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(38, 38, 38)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(billAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(generateBillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(billDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(114, 114, 114)
                .addComponent(sendBill, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(382, Short.MAX_VALUE))
        );

        unitInput.setEnabled(false);

        jTabbedPane2.addTab("tab6", generateBillPanel);

        VisitorPanel.setBackground(new java.awt.Color(232, 239, 239));

        jLabel25.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel25.setText("Visitor Record");

        visitor_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Unit", "Plate Number", "Time in", "Time out", "Status", "Date", "Reason"
            }
        ));
        jScrollPane4.setViewportView(visitor_table);

        searchVisitorInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchVisitorInputActionPerformed(evt);
            }
        });

        SearchByListVisitor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "name", "resident_unit", "plate_number" }));

        searchVisitorbtn.setText("Search");
        searchVisitorbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchVisitorbtnActionPerformed(evt);
            }
        });

        generateVisitorReport.setText("Generate Report");
        generateVisitorReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateVisitorReportActionPerformed(evt);
            }
        });

        visitorReportMonthSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        visitorReportYearSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2020", "2021", "2022", "2023" }));

        jLabel26.setText("Month:");

        jLabel27.setText("Year:");

        javax.swing.GroupLayout VisitorPanelLayout = new javax.swing.GroupLayout(VisitorPanel);
        VisitorPanel.setLayout(VisitorPanelLayout);
        VisitorPanelLayout.setHorizontalGroup(
            VisitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VisitorPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(VisitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addGroup(VisitorPanelLayout.createSequentialGroup()
                        .addComponent(SearchByListVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchVisitorInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchVisitorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(visitorReportMonthSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addComponent(visitorReportYearSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(generateVisitorReport)))
                .addContainerGap(339, Short.MAX_VALUE))
            .addGroup(VisitorPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1070, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        VisitorPanelLayout.setVerticalGroup(
            VisitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VisitorPanelLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel25)
                .addGap(44, 44, 44)
                .addGroup(VisitorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchByListVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchVisitorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchVisitorbtn)
                    .addComponent(jLabel26)
                    .addComponent(visitorReportMonthSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(visitorReportYearSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateVisitorReport))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(362, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab7", VisitorPanel);

        managementForum.setBackground(new java.awt.Color(232, 239, 239));

        managementForumTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Pubilsher", "Title", "Content", "Created_date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        managementForumTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                managementForumTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(managementForumTable);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Management Forum");

        javax.swing.GroupLayout managementForumLayout = new javax.swing.GroupLayout(managementForum);
        managementForum.setLayout(managementForumLayout);
        managementForumLayout.setHorizontalGroup(
            managementForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementForumLayout.createSequentialGroup()
                .addGroup(managementForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managementForumLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1031, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managementForumLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        managementForumLayout.setVerticalGroup(
            managementForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementForumLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(428, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab8", managementForum);

        managementForumDicussionPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel51.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel51.setText("View Post");

        jPanel21.setBackground(new java.awt.Color(232, 239, 239));
        jPanel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(54, 84, 85)));
        jPanel21.setForeground(new java.awt.Color(54, 84, 85));

        jLabel52.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel52.setText("Author:");

        jLabel53.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel53.setText("Title:");

        jLabel54.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel54.setText("Date:");

        jLabel55.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel55.setText("Content:");

        postContentLabel.setEditable(false);
        postContentLabel.setBackground(new java.awt.Color(232, 239, 239));
        postContentLabel.setColumns(20);
        postContentLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        postContentLabel.setRows(5);
        jScrollPane14.setViewportView(postContentLabel);

        postAuthorLabel.setEditable(false);
        postAuthorLabel.setBackground(new java.awt.Color(232, 239, 239));
        postAuthorLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        postAuthorLabel.setText("(content)");
        postAuthorLabel.setBorder(null);

        postTitleLabel.setEditable(false);
        postTitleLabel.setBackground(new java.awt.Color(232, 239, 239));
        postTitleLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        postTitleLabel.setText("(content)");
        postTitleLabel.setBorder(null);

        postDateLabel.setEditable(false);
        postDateLabel.setBackground(new java.awt.Color(232, 239, 239));
        postDateLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        postDateLabel.setText("(content)");
        postDateLabel.setBorder(null);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 927, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel52)
                            .addComponent(jLabel53)
                            .addComponent(jLabel54)
                            .addComponent(jLabel55))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(postAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(postTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(postDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel55)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        repliesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Replies", "Commenter", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(repliesTable);

        jLabel28.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel28.setText("View Reply");

        typeForum.setFont(new java.awt.Font("Helvetica Neue", 0, 1)); // NOI18N
        typeForum.setText("jLabel30");

        forumID.setFont(new java.awt.Font("Helvetica Neue", 0, 1)); // NOI18N
        forumID.setText("jLabel30");

        backToForumTable.setBackground(new java.awt.Color(164, 221, 221));
        backToForumTable.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backToForumTable.setForeground(new java.awt.Color(54, 84, 85));
        backToForumTable.setText("Back");
        backToForumTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(54, 84, 85), 2));
        backToForumTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToForumTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managementForumDicussionPanelLayout = new javax.swing.GroupLayout(managementForumDicussionPanel);
        managementForumDicussionPanel.setLayout(managementForumDicussionPanelLayout);
        managementForumDicussionPanelLayout.setHorizontalGroup(
            managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backToForumTable, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel51)
                        .addGroup(managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(typeForum))
                            .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                                .addGap(290, 290, 290)
                                .addComponent(forumID))))
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(411, Short.MAX_VALUE))
        );
        managementForumDicussionPanelLayout.setVerticalGroup(
            managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                .addGroup(managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(managementForumDicussionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel51)
                            .addComponent(typeForum)))
                    .addGroup(managementForumDicussionPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(forumID)))
                .addGap(18, 18, 18)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel28)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backToForumTable, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab9", managementForumDicussionPanel);

        residentForum.setBackground(new java.awt.Color(232, 239, 239));

        residentForumTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Pubilsher", "Title", "Content", "Created_date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        residentForumTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                residentForumTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(residentForumTable);

        jLabel29.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel29.setText("Resident Forum");

        javax.swing.GroupLayout residentForumLayout = new javax.swing.GroupLayout(residentForum);
        residentForum.setLayout(residentForumLayout);
        residentForumLayout.setHorizontalGroup(
            residentForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(residentForumLayout.createSequentialGroup()
                .addGroup(residentForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(residentForumLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel29))
                    .addGroup(residentForumLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        residentForumLayout.setVerticalGroup(
            residentForumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(residentForumLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel29)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(435, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab10", residentForum);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1196, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 969, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("tab11", jPanel5);

        jPanel3.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 33, 1160, 1000));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1040, Short.MAX_VALUE)
        );

        jMenu1.setText("Bill");

        createBill.setText("Create Bill");
        createBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBillActionPerformed(evt);
            }
        });
        jMenu1.add(createBill);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void home_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home_btnActionPerformed
                jTabbedPane2.setSelectedIndex(0);  
                username_input.setText("");
                email_input.setText("");
                password_input.setText("");
    }//GEN-LAST:event_home_btnActionPerformed

    private void account_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_btnActionPerformed
        jTabbedPane2.setSelectedIndex(1);  
        username_input.setText("");
        email_input.setText("");
        password_input.setText("");
        DefaultTableModel model = (DefaultTableModel) resident_table.getModel();
        model.setRowCount(0);
        load_residentAccount();
    }//GEN-LAST:event_account_btnActionPerformed

    private void openBillpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBillpanelActionPerformed
        
        jTabbedPane2.setSelectedIndex(4); 
        DefaultTableModel model = (DefaultTableModel) billRecord_table.getModel();
        model.setRowCount(0);
        unitList.removeAllItems();
        rs = floor_unitList();
        try{
          
            while(rs.next()){
                String unit = rs.getString("floor_unit");
                unitList.addItem(unit);
            }
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
        
        load_billRecord();

    }//GEN-LAST:event_openBillpanelActionPerformed

    private void vistorPanelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vistorPanelbtnActionPerformed
        jTabbedPane2.setSelectedIndex(6);  
        DefaultTableModel model = (DefaultTableModel) visitor_table.getModel();
        model.setRowCount(0);
        load_visitorRecord();
    }//GEN-LAST:event_vistorPanelbtnActionPerformed

    private void username_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_username_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_username_inputActionPerformed

    private void password_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_password_inputActionPerformed

    private void addResidentAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addResidentAccountActionPerformed
        conn = sqliteConn2.connect();
        if(conn!=null){
            String username = username_input.getText();
            String email = email_input.getText();
            String password = password_input.getText();
            String unit = residentUnitInput.getSelectedItem().toString();
            String currentDate = getCurrentDate();
            String sql = "INSERT into resident_account(username,email,password,created_date) values (?,?,?,?)";
            String findID = "SELECT id from resident_account WHERE email =?";
            String sql3 = "UPDATE  apartment_unit SET resident_id =? ,registered='true' WHERE floor_unit =?";
            
            if(!isValidEmail(email)){
                JOptionPane.showMessageDialog(null, "Invalid email format", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if(isEmailAlreadyExists(email)){
                
                JOptionPane.showMessageDialog(null, "Email already exists", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            else{
                try{
                pst = conn.prepareStatement(sql);
                pst.setString(1,username);
                pst.setString(2,email);
                pst.setString(3,password);
                pst.setString(4,currentDate);
                pst.execute();
                

                JOptionPane.showMessageDialog(null,"Account Created");
                }catch (Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
                
                try{
                    pst =conn.prepareStatement(findID);
                    pst.setString(1,email);
                    rs = pst.executeQuery();
                    String resident_id = rs.getString("id");

                    pst = conn.prepareStatement(sql3);
                    pst.setString(1,resident_id);
                    pst.setString(2, unit );
                    pst.execute();
                    JOptionPane.showMessageDialog(null,"Unit Created");
                
                

                
                }catch (Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
                
                
         }
            
                
        }
        
    }//GEN-LAST:event_addResidentAccountActionPerformed

    private void addAcc_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAcc_btnActionPerformed
        conn = sqliteConn2.connect();
        jTabbedPane2.setSelectedIndex(2); 
        username_input.setText("");
        email_input.setText("");
        password_input.setText("");
        String sql = "SELECT floor_unit from apartment_unit WHERE registered ='false' ";
        try{
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                String unit = rs.getString("floor_unit");
                residentUnitInput.addItem(unit);
            }
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
        
        
    }//GEN-LAST:event_addAcc_btnActionPerformed

    private void resident_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resident_tableMouseClicked
                
        
         
        
    }//GEN-LAST:event_resident_tableMouseClicked

    private void residentUnitInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residentUnitInputActionPerformed
        
    }//GEN-LAST:event_residentUnitInputActionPerformed

    private void deleteAccountbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountbtnActionPerformed
        DefaultTableModel residentTbl = (DefaultTableModel) resident_table.getModel();
        conn = sqliteConn2.connect();
        int row = resident_table.getSelectedRow();
   
        if(resident_table.getSelectedRowCount() ==1){
            String email = resident_table.getModel().getValueAt(row, 3).toString();
            String id = resident_table.getModel().getValueAt(row, 0).toString();
            System.out.println(email);
            String sql = "DELETE  FROM resident_account WHERE email=?";
            String unregister_unit = " UPDATE apartment_unit SET resident_id ='' , registered = 'false' WHERE resident_id =? ";
           
            residentTbl.removeRow(resident_table.getSelectedRow());
            
            try{
                pst = conn.prepareStatement(sql);
                pst.setString(1,email);
                pst.executeUpdate();
    
                JOptionPane.showMessageDialog(this,"Account Delete Successfully");
                
                
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }
            try{
                pst = conn.prepareStatement(unregister_unit);
                pst.setString(1,id);
                pst.executeUpdate();
    
   
                
                
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }
        
            
               
        }else{
                if(resident_table.getRowCount()==0){
                    JOptionPane.showMessageDialog(this, "This table is empty");
                }else{
                    JOptionPane.showMessageDialog(this, "Please select one row of table to delete");
                }
     }
    }//GEN-LAST:event_deleteAccountbtnActionPerformed

    private void viewResidentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResidentDetailsActionPerformed
        int index = resident_table.getSelectedRow();
        TableModel resident_model = resident_table.getModel();
        DefaultTableModel vehicle = (DefaultTableModel)resident_vehicle.getModel();
        String username = resident_model.getValueAt(index, 1).toString();
        conn = sqliteConn2.connect();

        if(conn!= null){
            jTabbedPane2.setSelectedIndex(3);
            resident_name.setText(username);
            String sql = "SELECT resident_account.ic,resident_account.name,resident_account.contact, apartment_unit.floor_unit ,resident_vehicle.brand,\n" +
                "resident_vehicle.model,resident_vehicle.plate_number,resident_vehicle.color\n" +
                "FROM resident_account ,apartment_unit ,resident_vehicle\n" +
                "WHERE resident_account.username =? \n" +
                "AND resident_account.id = apartment_unit.resident_id";
            try{
               pst = conn.prepareStatement(sql);
               pst.setString(1,username);
               rs = pst.executeQuery();
               while(rs.next()){
               resident_ic.setText(rs.getString("ic"));
               resident_contact.setText(rs.getString("contact"));
               resident_unit.setText(rs.getString("floor_unit"));
               resident_name.setText(rs.getString("name"));
               String model = rs.getString("model");
               String brand = rs.getString("brand");
               String plate = rs.getString("plate_number");
               String color = rs.getString("color");
              String  tbData[] ={model,brand,plate,color};
              vehicle.addRow(tbData);
               
               }
               
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
         
        }
    }//GEN-LAST:event_viewResidentDetailsActionPerformed

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportActionPerformed
        conn = sqliteConn2.connect();
String month = monthPicker.getSelectedItem().toString();
String year = yearPicker.getSelectedItem().toString();
String sql = "SELECT * FROM bill_record WHERE created_date BETWEEN ? and ?";
Object columns[] = {"ID","Unit","Bill_type","Bill_amount","Payment_status","Payment_date","Payment_method","Description","created_date"};
defaultTableModel.setColumnIdentifiers(columns);
billRecord_table.setModel(defaultTableModel);

try {
    pst = conn.prepareStatement(sql);
    pst.setString(1,year+"-"+month+"-"+"01");
    pst.setString(2,year+"-"+month+"-"+"31");
    rs = pst.executeQuery();
    defaultTableModel.setRowCount(0);
    int rowCount = 0;
    Object[] columnData = new Object[9];

    while (rs.next()) {
        columnData[0] = rs.getString("id");
        columnData[1] = rs.getString("floor_unit");
        columnData[2] = rs.getString("bill_type");
        columnData[3] = rs.getString("bill_amount");
        columnData[4] = rs.getString("payment_status");
        columnData[5] = rs.getString("payment_date");
        columnData[6] = rs.getString("payment_method");
        columnData[7] = rs.getString("description");
        columnData[8] = rs.getString("created_date");

        defaultTableModel.addRow(columnData);
        rowCount++;
    }

    if (rowCount > 0) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileWriter fw = new FileWriter(fileToSave);
                 BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("Bill record");
                bw.newLine();
                for (int i = 0; i < billRecord_table.getRowCount(); i++) {
                    for (int j = 0; j < billRecord_table.getColumnCount(); j++) {
                        bw.write(billRecord_table.getValueAt(i, j) + ",");
                    }
                    bw.newLine();
                }
                JOptionPane.showMessageDialog(this, "Successfully Saved");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error occurred while saving the file", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "No record found");
    }
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    // Close resources (result set, statement, connection)
    if (rs != null) {
        try {
            rs.close();
        } catch (SQLException e) {
            // Handle exception
        }
    }
    if (pst != null) {
        try {
            pst.close();
        } catch (SQLException e) {
            // Handle exception
        }
    }
    if (conn != null) {
        try {
            conn.close();
        } catch (SQLException e) {
            // Handle exception
        }
    }
}

                    
        
        
        
    }//GEN-LAST:event_generateReportActionPerformed

    private void allUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allUnitActionPerformed
        unitInput.setEnabled(false);
    }//GEN-LAST:event_allUnitActionPerformed

    private void selectedUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedUnitActionPerformed
            unitInput.setEnabled(true);
    }//GEN-LAST:event_selectedUnitActionPerformed

    private void billDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billDescriptionActionPerformed

    private void sendBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBillActionPerformed
        conn = sqliteConn2.connect();
        String currentDate = getCurrentDate();
        if(conn != null){
            if(selectedUnit.isSelected()){
                String sql = "INSERT INTO bill_record(floor_unit,bill_type,bill_amount,payment_status,description,created_date) values(?,?,?,?,?,?) ";
                String billType = billTypeSelection.getSelectedItem().toString();
                String unit = unitInput.getSelectedItem().toString();
                String amount = billAmountTextField.getText();
                String description = billDescription.getText();
                if(amount.equals("")){
                    JOptionPane.showMessageDialog(null,"Please enter amount");
                }else if(description.equals("")){
                    JOptionPane.showMessageDialog(null,"Please give description");
                }else{
                    try{
                        pst = conn.prepareStatement(sql);
                        pst.setString(1, unit);
                        pst.setString(2, billType);
                        pst.setString(3, amount);
                        pst.setString(4, "false");
                        pst.setString(5, description);
                        pst.setString(6, currentDate);
                        pst.execute();
                        JOptionPane.showMessageDialog(null,"Bill created");
                        billAmountTextField.setText("");
                        billDescription.setText("");
                    }catch(SQLException e){
                       JOptionPane.showMessageDialog(null,e);
                        }
                }
                                   
            }else if(allUnit.isSelected()){
                String sql = "SELECT floor_unit from apartment_unit WHERE registered ='true' ";
                String sql2 = "INSERT INTO bill_record (floor_unit,bill_type,bill_amount,payment_status,description,created_date) values(?,?,?,?,?,?)";
                try{
                    Statement stm = conn.createStatement();
                    ResultSet rs = stm.executeQuery(sql);
                    
                    while(rs.next()){
                        String billType = billTypeSelection.getSelectedItem().toString();
                        
                        String description = billDescription.getText();
                        String unit = rs.getString("floor_unit");
                        String amount = billAmountTextField.getText();
                        pst = conn.prepareStatement(sql2);
                        pst.setString(1, unit);
                        pst.setString(2, billType);
                        pst.setString(3, amount);
                        pst.setString(4, "false");
                        pst.setString(5, description);
                        pst.setString(6, currentDate);
                        pst.execute();
                        
                    }
                    JOptionPane.showMessageDialog(null,"Bill created");
                    

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
            }else{
                JOptionPane.showMessageDialog(null,"Select one options at unit");
            }
        }
    }//GEN-LAST:event_sendBillActionPerformed

    private void billTypeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billTypeSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billTypeSelectionActionPerformed

    private void monthPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthPickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthPickerActionPerformed

    private void SearchUnitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchUnitbtnActionPerformed
        conn = sqliteConn2.connect();
        Object columns[] = {"ID","Unit","Bill_type","Bill_amount","Payment_status","Payment_date","Payment_method","Description","created_date"};
        defaultTableModel.setColumnIdentifiers(columns);
        billRecord_table.setModel(defaultTableModel);
        String unit = unitList.getSelectedItem().toString();
        String sql = "SELECT * from bill_record WHERE floor_unit =?";
        if(conn !=null){
            try{
              pst = conn.prepareStatement(sql);
              pst.setString(1,unit);
              rs = pst.executeQuery();
              defaultTableModel.setRowCount(0);
              Object[] columnData = new Object[9];
                while(rs.next()){
                       columnData[0] = rs.getString("id");
                       columnData[1] = rs.getString("floor_unit");
                       columnData[2] = rs.getString("bill_type");
                       columnData[3] = rs.getString("bill_amount");
                       columnData[4] = rs.getString("payment_status");
                       columnData[5] = rs.getString("payment_date");
                       columnData[6] = rs.getString("payment_method");
                       columnData[7] = rs.getString("description");
                       columnData[8] = rs.getString("created_date");
                     
                       defaultTableModel.addRow(columnData);
                       
                }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
                }finally {
        // Close resources (result set, statement, connection)
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                // Handle exception
            }
        }
        if (pst != null) {
            try {
                pst.close();
            } catch (SQLException e) {
                // Handle exception
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                // Handle exception
            }
        }
}
              
        }
    }//GEN-LAST:event_SearchUnitbtnActionPerformed

    private void sendReminderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendReminderbtnActionPerformed
         conn =sqliteConn2.connect();
         String date = getCurrentDate();
         rs = bill_due_list();
         int count =0;
         String sql = "INSERT INTO bill_notification (title,unit,content,mark_as_read,created_date) values(?,?,?,?,?) ";
         try{
            while(rs.next()){
             
                 String unit = rs.getString("floor_unit");
                 pst = conn.prepareStatement(sql);
                 pst.setString(1, "Bill Reminder");
                 pst.setString(2, unit);
                 pst.setString(3, "Please pay the bill that have been due, thank for your cooperation");
                 pst.setString(4, "false");
                 pst.setString(5,date);
                 pst.execute();
                 count++;
             
             }
            if(count>0){
                JOptionPane.showMessageDialog(null,"Reminder Sent");
            }
         }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
                }finally {
        // Close resources (result set, statement, connection)
                    if (rs != null) {
                        try {
                            rs.close();
                        } catch (SQLException e) {
                            // Handle exception
                        }
                    }
                    if (pst != null) {
                        try {
                            pst.close();
                        } catch (SQLException e) {
                            // Handle exception
                        }
                    }
                    if (conn != null) {
                        try {
                            conn.close();
                        } catch (SQLException e) {
                            // Handle exception
                        }
                    }
            }
             
             
         
         
    }//GEN-LAST:event_sendReminderbtnActionPerformed

    private void createBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBillActionPerformed
            jTabbedPane2.setSelectedIndex(5); 
            conn = sqliteConn2.connect();
            String sql = "SELECT floor_unit from apartment_unit WHERE registered ='true' ";
        try{
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next()){
                String unit = rs.getString("floor_unit");
                unitInput.addItem(unit);
            }
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_createBillActionPerformed

    private void searchVisitorInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchVisitorInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchVisitorInputActionPerformed

    private void searchVisitorbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchVisitorbtnActionPerformed
        conn = sqliteConn2.connect();
        String searchBy = SearchByListVisitor.getSelectedItem().toString();
        String input = searchVisitorInput.getText();
        
        Object columns[] = {"Name","Unit","Plate number","Time in","Time out","Status","Date","Reason"};
        
        defaultTableModel.setColumnIdentifiers(columns);
        visitor_table.setModel(defaultTableModel);
        if(conn != null){   
             
            
            if(searchBy.equals("name")){
                String sql = "SELECT name,resident_unit,plate_number,time_in,time_out,status,date,reason FROM visitor WHERE name = ? ";
                try {
                  int rowCount = 0;
                pst = conn.prepareStatement(sql);
                pst.setString(1, input);
                //pst.setString(2,input);
                rs = pst.executeQuery();
                defaultTableModel.setRowCount(0);
                Object[] columnData = new Object[9];
                while(rs.next()){
                       columnData[0] = rs.getString("name");
                       columnData[1] = rs.getString("resident_unit");
                       columnData[2] = rs.getString("plate_number");
                       columnData[3] = rs.getString("time_in");
                       columnData[4] = rs.getString("time_out");
                       columnData[5] = rs.getString("status");
                       columnData[6] = rs.getString("date");
                       columnData[7] = rs.getString("reason");
                       
                     
                       defaultTableModel.addRow(columnData);
                       rowCount++;

                }
                if(rowCount <=0){
                        JOptionPane.showMessageDialog(null,"Record not found");
                    }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }finally {
    // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
            }else if(searchBy.equals("resident_unit")){
                String sql = "SELECT name,resident_unit,plate_number,time_in,time_out,status,date,reason FROM visitor WHERE resident_unit = ? ";
                try {
                  int rowCount = 0;
                pst = conn.prepareStatement(sql);
                pst.setString(1, input);
                //pst.setString(2,input);
                rs = pst.executeQuery();
                defaultTableModel.setRowCount(0);
                Object[] columnData = new Object[9];
                while(rs.next()){
                       columnData[0] = rs.getString("name");
                       columnData[1] = rs.getString("resident_unit");
                       columnData[2] = rs.getString("plate_number");
                       columnData[3] = rs.getString("time_in");
                       columnData[4] = rs.getString("time_out");
                       columnData[5] = rs.getString("status");
                       columnData[6] = rs.getString("date");
                       columnData[7] = rs.getString("reason");
                       
                     
                       defaultTableModel.addRow(columnData);
                       rowCount++;

                }
                if(rowCount <=0){
                        JOptionPane.showMessageDialog(null,"Record not found");
                    }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }finally {
    // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
            }else if(searchBy.equals("plate_number")){
                String sql = "SELECT name,resident_unit,plate_number,time_in,time_out,status,date,reason FROM visitor WHERE plate_number = ? ";
                try {
                  int rowCount = 0;
                pst = conn.prepareStatement(sql);
                pst.setString(1, input);
                //pst.setString(2,input);
                rs = pst.executeQuery();
                defaultTableModel.setRowCount(0);
                Object[] columnData = new Object[9];
                while(rs.next()){
                       columnData[0] = rs.getString("name");
                       columnData[1] = rs.getString("resident_unit");
                       columnData[2] = rs.getString("plate_number");
                       columnData[3] = rs.getString("time_in");
                       columnData[4] = rs.getString("time_out");
                       columnData[5] = rs.getString("status");
                       columnData[6] = rs.getString("date");
                       columnData[7] = rs.getString("reason");
                       
                     
                       defaultTableModel.addRow(columnData);
                       rowCount++;

                }
                if(rowCount <=0){
                        JOptionPane.showMessageDialog(null,"Record not found");
                    }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }finally {
    // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
            }

               
        }
        
    }//GEN-LAST:event_searchVisitorbtnActionPerformed

    private void generateVisitorReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateVisitorReportActionPerformed
        conn = sqliteConn2.connect();
        String month = visitorReportMonthSelection.getSelectedItem().toString();
        String year = visitorReportYearSelection.getSelectedItem().toString();
        String sql = "SELECT * FROM visitor WHERE date BETWEEN  ? AND ?";
        String sql2 = "SELECT COUNT(date) as 'Total_of_visitor_in_month' FROM visitor WHERE date BETWEEN  ? AND ?";
        Object columns[] = {"Name","Unit","Plate number","Time in","Time out","Status","Date","Reason"};
        defaultTableModel.setColumnIdentifiers(columns);
        visitor_table.setModel(defaultTableModel);

        try {
            pst = conn.prepareStatement(sql);
            
            pst.setString(1,year+"-"+month+"-"+"01");
            pst.setString(2,year+"-"+month+"-"+"31");
            rs = pst.executeQuery();
            defaultTableModel.setRowCount(0);
            int rowCount = 0;
            Object[] columnData = new Object[9];

            while (rs.next()) {
                       columnData[0] = rs.getString("name");
                       columnData[1] = rs.getString("resident_unit");
                       columnData[2] = rs.getString("plate_number");
                       columnData[3] = rs.getString("time_in");
                       columnData[4] = rs.getString("time_out");
                       columnData[5] = rs.getString("status");
                       columnData[6] = rs.getString("date");
                       columnData[7] = rs.getString("reason");

                defaultTableModel.addRow(columnData);
                rowCount++;
            }
            pst = conn.prepareStatement(sql2);
            pst.setString(1,year+"-"+month+"-"+"01");
            pst.setString(2,year+"-"+month+"-"+"31");
            rs = pst.executeQuery();
            String total = rs.getString("Total_of_visitor_in_month");
            System.out.println(total);

            if (rowCount > 0) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Specify a file to save");
                int userSelection = fileChooser.showSaveDialog(this);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    try (FileWriter fw = new FileWriter(fileToSave);
                         BufferedWriter bw = new BufferedWriter(fw)) {
                        bw.write("Vistor report");
                        bw.newLine();
                        bw.write("Total visitor in month:" +total);
                        bw.newLine();
                        
                        for (int i = 0; i < visitor_table.getRowCount(); i++) {
                            for (int j = 0; j < visitor_table.getColumnCount(); j++) {
                                bw.write(visitor_table.getValueAt(i, j) + ",");
                            }
                            bw.newLine();
                        }
                        JOptionPane.showMessageDialog(this, "Successfully Saved");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error occurred while saving the file", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "No record found");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
    }//GEN-LAST:event_generateVisitorReportActionPerformed

    private void managementForumPanelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managementForumPanelbtnActionPerformed
        jTabbedPane2.setSelectedIndex(7);
        DefaultTableModel model = (DefaultTableModel) managementForumTable.getModel();
        model.setRowCount(0);
        loadManagementForum();
    }//GEN-LAST:event_managementForumPanelbtnActionPerformed

    private void managementForumTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_managementForumTableMouseClicked
        jTabbedPane2.setSelectedIndex(8);
        typeForum.setText("Management");
        DefaultTableModel management_forum = (DefaultTableModel)managementForumTable.getModel();
        int row = managementForumTable.getSelectedRow();
        if(managementForumTable.getSelectedRowCount() ==1){
            String id = managementForumTable.getModel().getValueAt(row, 0).toString();
            String title= managementForumTable.getModel().getValueAt(row, 1).toString();
            String author = managementForumTable.getModel().getValueAt(row, 2).toString();
            String content = managementForumTable.getModel().getValueAt(row, 3).toString();
            String date = managementForumTable.getModel().getValueAt(row, 4).toString();

            postTitleLabel.setText(title);
            postContentLabel.setText(content);
            postAuthorLabel.setText(author);
            postDateLabel.setText(date);
            DefaultTableModel replies = (DefaultTableModel)repliesTable.getModel();
            replies.setRowCount(0);
            loadManagementReply(id);
            forumID.setText(id);
        }
    }//GEN-LAST:event_managementForumTableMouseClicked

    private void residentForumTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_residentForumTableMouseClicked
        jTabbedPane2.setSelectedIndex(8);
        typeForum.setText("Resident");
        DefaultTableModel resident_forum = (DefaultTableModel)residentForumTable.getModel();
        int row = residentForumTable.getSelectedRow();
        if(residentForumTable.getSelectedRowCount() ==1){
            String id = residentForumTable.getModel().getValueAt(row, 0).toString();
            String title= residentForumTable.getModel().getValueAt(row, 1).toString();
            String author = residentForumTable.getModel().getValueAt(row, 2).toString();
            String content = residentForumTable.getModel().getValueAt(row, 3).toString();
            String date = residentForumTable.getModel().getValueAt(row, 4).toString();

            postTitleLabel.setText(title);
            postContentLabel.setText(content);
            postAuthorLabel.setText(author);
            postDateLabel.setText(date);
            DefaultTableModel replies = (DefaultTableModel)repliesTable.getModel();
            replies.setRowCount(0);
            loadManagementReply(id);
            forumID.setText(id);
        }
    }//GEN-LAST:event_residentForumTableMouseClicked

    private void residentForumPanelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residentForumPanelbtnActionPerformed
        jTabbedPane2.setSelectedIndex(9);
        DefaultTableModel resident_model = (DefaultTableModel) residentForumTable.getModel();
        resident_model.setRowCount(0);
        loadResidentForum();
    }//GEN-LAST:event_residentForumPanelbtnActionPerformed

    private void backToForumTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToForumTableActionPerformed
        String type = typeForum.getText();
        if(type.equals("Management")){
            jTabbedPane2.setSelectedIndex(7);
        }else {
            jTabbedPane2.setSelectedIndex(9);
        }

    }//GEN-LAST:event_backToForumTableActionPerformed

    private void logOutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutbtnActionPerformed
        dispose();
        ManagerLoginNew login = new ManagerLoginNew();
        login.setVisible(true);
    }//GEN-LAST:event_logOutbtnActionPerformed
     public void load_residentAccount(){
        conn = sqliteConn2.connect();
        Object columns[] = {"ID","resident_username","floor_unit","resident_email","resident_password","created_date"};
        defaultTableModel.setColumnIdentifiers(columns);
        resident_table.setModel(defaultTableModel);
        if(conn != null){   
            String sql = "SELECT r.id ,r.username ,u.floor_unit,r.email, r.password,r.created_date\n" +
                    "FROM resident_account r, apartment_unit u\n" +
                    "WHERE u.registered = 'true' and u.resident_id = r.id";
            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                Object[] columnData = new Object[8];
                while(rs.next()){
                       columnData[0] = rs.getString("id");
                       columnData[1] = rs.getString("username");
                       columnData[2] = rs.getString("floor_unit");
                       columnData[3] = rs.getString("email");
                       columnData[4] = rs.getString("password");
                       columnData[5] = rs.getString("created_date");
                     
                       defaultTableModel.addRow(columnData);
                       
                }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }
               
        }
    }
     public void load_billRecord(){
        conn = sqliteConn2.connect();
        
        if(conn != null){   
            String sql = "SELECT * FROM bill_record";
            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                Object[] columnData = new Object[9];
                while(rs.next()){
                       columnData[0] = rs.getString("id");
                       columnData[1] = rs.getString("floor_unit");
                       columnData[2] = rs.getString("bill_type");
                       columnData[3] = rs.getString("bill_amount");
                       columnData[4] = rs.getString("payment_status");
                       columnData[5] = rs.getString("payment_date");
                       columnData[6] = rs.getString("payment_method");
                       columnData[7] = rs.getString("description");
                       columnData[8] = rs.getString("created_date");
                       DefaultTableModel bill_table = (DefaultTableModel)billRecord_table.getModel();
                       bill_table.addRow(columnData);
                       
                }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }
               
        }
    }
     
     public void load_visitorRecord(){
        conn = sqliteConn2.connect();
        Object columns[] = {"Name","Unit","Plate number","Time in","Time out","Status","Date","Reason"};
        
        if(conn != null){   
            String sql = "SELECT name,resident_unit,plate_number,time_in,time_out,status,date,reason FROM visitor";
            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                while(rs.next()){
                       String name = rs.getString("name");
                       String resident_unit = rs.getString("resident_unit");
                       String plate_number = rs.getString("plate_number");
                       String time_in = rs.getString("time_in");
                       String time_out = rs.getString("time_out");
                       String status = rs.getString("status");
                       String date = rs.getString("date");
                       String reason = rs.getString("reason");
                       String tbData[] ={name,resident_unit,plate_number,time_in,time_out,status,date,reason};
                       DefaultTableModel visitorRecord_table = (DefaultTableModel)visitor_table.getModel();
                       visitorRecord_table.addRow(tbData);
                       
                }
            }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
            }
               
        }
    }
     
public void loadManagementForum(){
        DefaultTableModel forum = (DefaultTableModel)managementForumTable.getModel();
        conn = sqliteConn2.connect();
        forum.setRowCount(0);
        String sql = "SELECT id,forum_title,forum_content,forum_author,created_date FROM management_forum";
        try{
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while(rs.next()){
                String id = rs.getString("id");
                 String title = rs.getString("forum_title");
                 String author = rs.getString("forum_author");
                 String content = rs.getString("forum_content");
                 String date = rs.getString("created_date");
                 String tbData[] ={id,title,author,content,date};
                 
                 forum.addRow(tbData);
            }
           
        }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
        }finally {
            // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
}
    
public void loadManagementReply(String forum_id){
    conn = sqliteConn2.connect();
    DefaultTableModel replies = (DefaultTableModel)repliesTable.getModel();
    String sql = "SELECT * FROM management_forum_replies where forum_id =?";
    try{
        pst = conn.prepareStatement(sql);
        pst.setString(1, forum_id);
        rs = pst.executeQuery();
        while(rs.next()){
            String id = rs.getString("id");
            String replyer = rs.getString("replyer");
            String comment = rs.getString("comment");
            String date = rs.getString("reply_date");
            String tbData[] ={id,comment,replyer,date};
                 
            replies.addRow(tbData);
        }
    }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }finally {
            // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
}

public void loadResidentReply(String forum_id){
    conn = sqliteConn2.connect();
    DefaultTableModel replies = (DefaultTableModel)repliesTable.getModel();
    String sql = "SELECT * FROM resident_forum_replies where forum_id =?";
    try{
        pst = conn.prepareStatement(sql);
        pst.setString(1, forum_id);
        rs = pst.executeQuery();
        while(rs.next()){
            String id = rs.getString("id");
            String replyer = rs.getString("replyer");
            String comment = rs.getString("comment");
            String date = rs.getString("reply_date");
            String tbData[] ={id,comment,replyer,date};
                 
            replies.addRow(tbData);
        }
    }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }finally {
            // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
}


public void loadResidentForum(){
        DefaultTableModel resident_forum = (DefaultTableModel)residentForumTable.getModel();
        conn = sqliteConn2.connect();
        resident_forum.setRowCount(0);
        String sql = "SELECT id,forum_title,forum_content,forum_author,created_date FROM resident_forum";
        try{
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while(rs.next()){
                String id = rs.getString("id");
                 String title = rs.getString("forum_title");
                 String author = rs.getString("forum_author");
                 String content = rs.getString("forum_content");
                 String date = rs.getString("created_date");
                 String tbData[] ={id,title,author,content,date};
                 
                 resident_forum.addRow(tbData);
            }
           
        }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
        }finally {
            // Close resources (result set, statement, connection)
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // Handle exception
                }
            }
        }
}
public ResultSet bill_due_list(){
    conn = sqliteConn2.connect();
    String bill = "SELECT COUNT(floor_unit) as payment_due,floor_unit,payment_status FROM bill_record WHERE payment_status ='false' GROUP BY floor_unit";
    try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(bill);
            return rs;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return null;
}
public ResultSet floor_unitList() {
        conn = sqliteConn2.connect();
        String sql = "SELECT floor_unit from apartment_unit WHERE registered = 'true'";
        try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            return rs;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return null; // Return null if an exception occurs
    }
    private boolean isValidEmail(String email) {
        String emailPattern = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
        Pattern pattern = Pattern.compile(emailPattern);
        return pattern.matcher(email).matches();
    } 
    
    private boolean isEmailAlreadyExists(String email){
          
          conn = sqliteConn2.connect();
          if(conn != null){
                String sql = "SELECT COUNT(*) FROM user WHERE email =?";
                try{
                pst = conn.prepareStatement(sql);
                pst.setString(1,email);
                rs = pst.executeQuery();
                    if(rs.next()){
                       int count = rs.getInt(1);
                       return count > 0;    
                   }
                }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,e);
                }    
                   
          }
          return false;
         }
         
     
        

    
    private String getCurrentDate() {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date currentDate = new Date();
    return dateFormat.format(currentDate);
    }
    private String getCurrentTime(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalTime localTime = LocalTime.now();
        return dtf.format(localTime);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerMainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BillPanel;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JComboBox<String> SearchByListVisitor;
    private javax.swing.JButton SearchUnitbtn;
    private javax.swing.JLabel TimeLabel;
    private javax.swing.JPanel VisitorPanel;
    private javax.swing.JButton account_btn;
    private javax.swing.JButton addAcc_btn;
    private javax.swing.JButton addResidentAccount;
    private javax.swing.JPanel addaccPanel;
    private javax.swing.JRadioButton allUnit;
    private javax.swing.JButton backToForumTable;
    private javax.swing.JTextField billAmountTextField;
    private javax.swing.JTextField billDescription;
    private javax.swing.JTable billRecord_table;
    private javax.swing.JComboBox<String> billTypeSelection;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JMenuItem createBill;
    private javax.swing.JButton deleteAccountbtn;
    private javax.swing.JTextField email_input;
    private javax.swing.JLabel forumID;
    private javax.swing.JPanel generateBillPanel;
    private javax.swing.JButton generateReport;
    private javax.swing.JButton generateVisitorReport;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton home_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JButton logOutbtn;
    private javax.swing.JPanel managementForum;
    private javax.swing.JPanel managementForumDicussionPanel;
    private javax.swing.JButton managementForumPanelbtn;
    private javax.swing.JTable managementForumTable;
    private javax.swing.JComboBox<String> monthPicker;
    private javax.swing.JButton openBillpanel;
    private javax.swing.JTextField password_input;
    private javax.swing.JTextField postAuthorLabel;
    private javax.swing.JTextArea postContentLabel;
    private javax.swing.JTextField postDateLabel;
    private javax.swing.JTextField postTitleLabel;
    private javax.swing.JTable repliesTable;
    private javax.swing.JPanel residentAccountInfo;
    private javax.swing.JPanel residentForum;
    private javax.swing.JButton residentForumPanelbtn;
    private javax.swing.JTable residentForumTable;
    private javax.swing.JComboBox<String> residentUnitInput;
    public javax.swing.JLabel resident_contact;
    public javax.swing.JLabel resident_ic;
    public javax.swing.JLabel resident_name;
    private javax.swing.JTable resident_table;
    public javax.swing.JLabel resident_unit;
    public javax.swing.JTable resident_vehicle;
    private javax.swing.JPanel residentaccPanel;
    private javax.swing.JTextField searchVisitorInput;
    private javax.swing.JButton searchVisitorbtn;
    private javax.swing.JRadioButton selectedUnit;
    private javax.swing.JButton sendBill;
    private javax.swing.JButton sendReminderbtn;
    private javax.swing.JLabel typeForum;
    private javax.swing.JComboBox<String> unitInput;
    private javax.swing.JComboBox<String> unitList;
    private javax.swing.JTextField username_input;
    private javax.swing.JButton viewResidentDetails;
    private javax.swing.JComboBox<String> visitorReportMonthSelection;
    private javax.swing.JComboBox<String> visitorReportYearSelection;
    private javax.swing.JTable visitor_table;
    private javax.swing.JButton vistorPanelbtn;
    private javax.swing.JComboBox<String> yearPicker;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true){
            Calendar cal = Calendar.getInstance();
            hour = cal.get(Calendar.HOUR_OF_DAY);
            minutes = cal.get(Calendar.MINUTE);
            second = cal.get(Calendar.SECOND);
            
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            Date dat = cal.getTime();
            String time = sdf.format(dat);
            TimeLabel.setText(time);
        }
    }
}
